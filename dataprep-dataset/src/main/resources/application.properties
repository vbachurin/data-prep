#
# ============================================================================
# Copyright (C) 2006-2016 Talend Inc. - www.talend.com
#
# This source code is available under agreement available at
# https://github.com/Talend/data-prep/blob/master/LICENSE
#
# You should have received a copy of the agreement
# along with this program; if not, write to Talend SA
# 9 rue Pages 92150 Suresnes, France
#
# ============================================================================
#

spring.profiles.active=standalone
# Web server port (0 = random).
server.port=8080

spring.mvc.async.request-timeout=600000

# Service documentation
service.documentation.name=Talend Data Preparation - Data Set Service (DSS)
service.documentation.description=This service exposes operations on data sets.
service.paths=datasets,version

# size limit for dataset in lines (if dataset.lines > limit, dataset is truncated)
dataset.records.limit=30000
# size limit for locally imported dataset in number of bytes
dataset.local.file.size.limit=2000000000

# Sets a limit on the number of data sets to be listed
dataset.list.limit=10

# In memory dataset metadata store
#dataset.metadata.store=in-memory
dataset.metadata.store=file
dataset.metadata.store.file.location=/tmp/dataprep/store/datasets/metadata

dataset.imports=hdfs,http,local

# DATA SET CONTENT STORE
#    Values: local
content-service.store=local
content-service.store.local.path=${java.io.tmpdir}/dataprep

# USER DATA STORE
#    Values: in-memory, file
#    Example: user.data.store=file
user.data.store=file
user.data.store.file.location=/tmp/dataprep/store/userdata

# Enable global lock
hazelcast.enabled=true

#
# optional technical settings
#
# http.pool.size=50
# http.pool.maxPerRoute=50

# Where DataQuality indexes are extracted:
dataquality.indexes.file.location=${java.io.tmpdir}/tdp/org.talend.dataquality.semantic

############# LOGGING #############
## Path of the log file
#logging.file=data/logs/dataprep-dataset.log
## Level output pattern, uncomment to add the MDC user after level
#logging.pattern.level=%5p [user %X{user}]
## Pattern used for file logging, uncomment to override Spring default
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %5p --- [%t] %-40.40logger{39} : %m%n%wEx
## Pattern used for console logging, uncomment to override Spring default
#logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx
## Configure ansi coloration in console output. Options are: always | never | detect
spring.output.ansi.enabled=always
###################################
